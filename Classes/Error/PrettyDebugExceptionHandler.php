<?php
namespace Flownative\PrettyExceptions\Error;

/*                                                                        *
 * This script belongs to the TYPO3 Flow framework.                       *
 *                                                                        *
 * It is free software; you can redistribute it and/or modify it under    *
 * the terms of the GNU Lesser General Public License, either version 3   *
 * of the License, or (at your option) any later version.                 *
 *                                                                        *
 * The TYPO3 project - inspiring people to share!                         *
 *                                                                        */

use TYPO3\Flow\Annotations as Flow;
use TYPO3\Flow\Core\Bootstrap;
use TYPO3\Flow\Exception as FlowException;
use TYPO3\Flow\Log\SystemLoggerInterface;
use TYPO3\Flow\Security\Account;
use TYPO3\Flow\Security\Context;
use TYPO3\Flow\Utility\Arrays;
use TYPO3\Flow\Utility\Environment;
use Whoops\Handler\PlainTextHandler;
use Whoops\Handler\PrettyPageHandler;
use Whoops\Run;

/**
 * Exception handler that produces nice output with code snippets and lots of debug information
 *
 * @Flow\Scope("singleton")
 */
class PrettyDebugExceptionHandler extends Run {

	/**
	 * @var SystemLoggerInterface
	 */
	protected $systemLogger;

	/**
	 * @var array
	 */
	protected $options = array();

	/**
	 * @var array
	 */
	protected $renderingOptions;

	/**
	 *
	 */
	public function __construct() {
		set_exception_handler(array($this, 'handleException'));
		$this->sendHttpCode(500);
		$this->writeToOutput(TRUE);
	}

	/**
	 * Injects the system logger
	 *
	 * @param SystemLoggerInterface $systemLogger
	 * @return void
	 */
	public function injectSystemLogger(SystemLoggerInterface $systemLogger) {
		$this->systemLogger = $systemLogger;
	}

	/**
	 * Sets options of this exception handler.
	 *
	 * @param array $options Options for the exception handler
	 * @return void
	 */
	public function setOptions(array $options) {
		$this->options = $options;
		unset($this->options['className']);

		$this->initializeHandlers();
	}

	/**
	 * Handles an exception, ultimately generating a Whoops error
	 * page.
	 *
	 * @param  \Exception $exception
	 * @return string    Output generated by handlers
	 */
	public function handleException(\Exception $exception) {
		// Ignore if the error is suppressed by using the shut-up operator @
		if (error_reporting() === 0) {
			return;
		}

		$this->renderingOptions = $this->resolveCustomRenderingOptions($exception);

		if (is_object($this->systemLogger) && isset($this->renderingOptions['logException']) && $this->renderingOptions['logException']) {
			$this->systemLogger->logException($exception);
		}

		// This will directly echo the resulting exception rendering.
		parent::handleException($exception);
	}

	/**
	 * Checks if custom rendering rules apply to the given $exception and returns those.
	 *
	 * @param \Exception $exception
	 * @return array the custom rendering options, or NULL if no custom rendering is defined for this exception
	 */
	protected function resolveCustomRenderingOptions(\Exception $exception) {
		$renderingOptions = array();
		if (isset($this->options['defaultRenderingOptions'])) {
			$renderingOptions = $this->options['defaultRenderingOptions'];
		}
		$renderingGroup = $this->resolveRenderingGroup($exception);
		if ($renderingGroup !== NULL) {
			$renderingOptions = Arrays::arrayMergeRecursiveOverrule($renderingOptions, $this->options['renderingGroups'][$renderingGroup]['options']);
			$renderingOptions['renderingGroup'] = $renderingGroup;
		}
		return $renderingOptions;
	}

	/**
	 * @param \Exception $exception
	 * @return string name of the resolved renderingGroup or NULL if no group could be resolved
	 */
	protected function resolveRenderingGroup(\Exception $exception) {
		if (!isset($this->options['renderingGroups'])) {
			return NULL;
		}
		foreach ($this->options['renderingGroups'] as $renderingGroupName => $renderingGroupSettings) {
			if (isset($renderingGroupSettings['matchingExceptionClassNames'])) {
				foreach ($renderingGroupSettings['matchingExceptionClassNames'] as $exceptionClassName) {
					if ($exception instanceof $exceptionClassName) {
						return $renderingGroupName;
					}
				}
			}
			if (isset($renderingGroupSettings['matchingStatusCodes']) && $exception instanceof FlowException) {
				if (in_array($exception->getStatusCode(), $renderingGroupSettings['matchingStatusCodes'])) {
					return $renderingGroupName;
				}
			}
		}
	}

	/**
	 * Initialize default Whoops handlers for Flow.
	 */
	protected function initializeHandlers() {
		$prettyPageHandler = new PrettyPageHandler();

		$prettyPageHandler->setResourcesPath(__DIR__ . '/../../Resources/Private/HandlerIncludes/');
		$prettyPageHandler->addCustomCss('Neos.css');

		$prettyPageHandler->addDataTableCallback('Flow Environment', function () {
			$result = [];
			$environment = Bootstrap::$staticObjectManager->get(Environment::class);
			if ($environment !== NULL) {
				$result['context'] = (string)$environment->getContext();
				$result['temporary directory'] = $environment->getPathToTemporaryDirectory();
			}

			return $result;
		});

		$prettyPageHandler->addDataTableCallback('Flow Security', function() {
			$result = [];
			$securityContext = Bootstrap::$staticObjectManager->get(Context::class);
			if ($securityContext instanceof Context) {
				$result['Initialized'] = $securityContext->isInitialized() ? 'YES' : 'NO';
				if ($securityContext->isInitialized() === TRUE) {
					$result['Active Roles'] = implode(', ', array_keys($securityContext->getRoles()));
					$account = $securityContext->getAccount();
					if ($account instanceof Account) {
						$result['Active Account Identifier'] = $account->getAccountIdentifier();
						$result['Active Account Authentication Provider'] = $account->getAuthenticationProviderName();
					}
				}
			}

			return $result;
		});

		$this->pushHandler($prettyPageHandler);
		$this->pushHandler(new PlainTextHandler());
	}

}
